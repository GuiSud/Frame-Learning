(() => { var t, e; t = window, e = document, window.AudioMap = function (i) { const { timeUpdate: a, playDone: n, delay: o, src: s } = { delay: 26, timeUpdate: () => { }, playDone: () => { }, ...i }, d = (i => { let a = {}; const n = document.createElement("canvas"); let o = n.getContext("2d"); n.innerText = "您的浏览器不支持该插件，请切换到谷歌浏览器获得最佳体验！", n.id = "canvas", e.body.appendChild(n), d(a, o); let s = null; function d(e, i) { let a = t.innerWidth, o = t.innerHeight; n.width = a, n.height = o, e.w = a, e.h = o, e.canvas = n, e.ctx = i; let s = i.createLinearGradient(a / 2, 300, a / 2, o / 2); s.addColorStop(1, "#473B7B"), s.addColorStop(.5, "#3584A7"), s.addColorStop(0, "#30D2BE"), i.fillStyle = s } return t.addEventListener("resize", (() => { s && clearTimeout(s), s = setTimeout((() => { d(a, o) }), i) })), a })(o), r = new AudioContext, l = r.createAnalyser(), u = document.createElement("audio"); this.audio = u, this.context = r, this.playing = !1, this.audio.src = s || "null", this.audio.addEventListener("timeupdate", a), this.audio.addEventListener("ended", n); const h = r.createMediaElementSource(this.audio); h.connect(l), h.connect(r.destination), this.audio.addEventListener("canplay", (({ target: t }) => { console.log("可以播放", t), this.canplay = !0, this.audioCallBack && this.audioCallBack(this), this.audioError = !1 })), this.audio.addEventListener("ended", (() => { this.playing = !1 })), this.audio.addEventListener("error", (({ target: t }) => { this.audioError = !0 })); let c = null; !function () { const { canvas: t, ctx: e, w: i, h: a } = d; let n = Math.round(i / 17); const o = new Uint8Array(l.frequencyBinCount); l.getByteFrequencyData(o), e.clearRect(0, 0, i, a); let s = Math.round(o.length / n); for (let t = 0; t < n; t++)e.fillRect(i / 2 + 10 * t, a / 2, 7, -o[s * t]), e.fillRect(i / 2 - 10 * t, a / 2, 7, -o[s * t]); c = window.requestAnimationFrame(arguments.callee) }(), this.play = t => { if (this.audioError) throw t && t({ state: 0, msg: "请先设置路径之后播放！" }), new Error("请先设置路径之后播放！"); this.canplay ? (this.context.resume(), this.audio.paused ? (t({ state: 1, msg: "开始播放" }), this.audio.play(), this.playing = !0) : (t({ state: 2, msg: "暂停播放" }), this.audio.pause(), this.playing = !1)) : setTimeout((() => { this.play() }), 16) }, this.pause = () => { this.audio.pause(), this.playing = !1 }, this.setSrc = (t = "../audio/嚣张.mp3", e) => (this.canplay = !1, this.playing = !1, this.audioError = !1, this.audio.setAttribute("src", t), this.audioCallBack = e, this), this.setVolume = t => { if (!((t = parseFloat(t)) >= 0 && t <= 1)) throw Error("音量设置在 0 - 1 之间"); this.audio.volume = t } } })();